#!/usr/bin/env python3
import argparse
import os
import sys

def rename_function(args):
    """Function to handle the rename command"""
    try:
        # execvp will replace the current process with media-rename
        # and pass all command line arguments after 'rename' to it
        cmd_args = ['media-rename', args.path]
        os.execvp('media-rename', cmd_args)
    except FileNotFoundError:
        print("Error: 'media-rename' script not found in PATH")
        sys.exit(1)
    except Exception as e:
        print(f"Error executing media-rename: {e}")
        sys.exit(1)

def ingest_function():
    """Function to handle the ingest command"""
    print("Executing ingest function...")
    # Add your ingest logic here
    pass

def install():
    """Install media scripts to ~/.local/bin"""
    import shutil
    from pathlib import Path

    # Get the path to ~/.local/bin
    install_dir = Path.home() / '.local' / 'bin'

    try:
        # Create ~/.local/bin if it doesn't exist
        install_dir.mkdir(parents=True, exist_ok=True)

        # Get the directory of the current script
        current_dir = Path(__file__).parent.resolve()

        # List of scripts to install
        scripts = ['media', 'media-rename']

        # Copy each script and make it executable
        for script in scripts:
            source = current_dir / script
            destination = install_dir / script

            # Remove existing file if it exists
            if destination.exists():
                destination.unlink()

            # Copy the file
            shutil.copy2(source, destination)

            # Make executable (add +x permission)
            destination.chmod(destination.stat().st_mode | 0o755)

        print(f"Successfully installed scripts to {install_dir}")
        print("Make sure ~/.local/bin is in your PATH")

    except Exception as e:
        print(f"Error during installation: {e}")
        sys.exit(1)


def main():
    # Create the parser
    parser = argparse.ArgumentParser(description='Process rename or ingest commands')
    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # Create parser for the 'rename' command
    rename_parser = subparsers.add_parser('rename', help='Rename media files based on their metadata')
    rename_parser.add_argument('path', help='path to the media files')

    subparsers.add_parser('install', help='Install media scripts to a location in $PATH')

    # Parse the arguments
    try:
        args = parser.parse_args()

        # Execute the appropriate function based on the command
        if args.command == 'rename':
            rename_function(args)
        elif args.command == 'ingest':
            ingest_function()
        elif args.command == 'install':
            install()

    except SystemExit:
        # Handle the case when invalid arguments are provided
        print("Invalid command. Please use 'rename' or 'ingest'")

if __name__ == "__main__":
    main()
