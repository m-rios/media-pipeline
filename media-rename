#!/usr/bin/env python3

'''
Rename media files based in their metadata
filename conventions:
common for all cameras
yymmdd_HHMM_SS_make
for gopro:
  append _RESOLUTION_FR_FOV_STAB
'''

import datetime
import glob
import json
import subprocess
import sys
import os
import media_utils

def process_file(filename):
    print("renaming " + filename)
    if media_utils.is_gopro(filename):
        process_as_gopro(filename)
    else:
        process_as_generic(filename)


def process_as_gopro(filename):
    result = subprocess.run(
        ['exiftool', '-DateTimeOriginal<QuickTime:CreateDate', filename],
        capture_output=True,
        text=True
    )

    if result.returncode != 0:
        print(f"Error: could not set DateTimeOriginal from QuickTime:CreateDate")
        print(result.stderr)
        exit(1)

    # fields of interest
    fois = ['DateTimeOriginal','Model', 'ImageWidth', 'VideoFrameRate', 'FieldOfView', 'ElectronicImageStabilization']

    # values of interest
    vois = media_utils.extract_exif_fields(filename, fois)

    new_filename = '_'.join(vois) + '.' + media_utils.extract_extension(filename)
    try:
        os.rename(filename, new_filename)
    except OSError as e:
        print(f"Error: could not rename file `{filename}`")
        print(e)
        exit(1)

def process_as_generic(filename):
    fois = ['DateTimeOriginal', 'Model']
    vois = media_utils.extract_exif_fields(filename, fois)

    new_filename = '_'.join(vois) + '.' + media_utils.extract_extension(filename)
    try:
        os.rename(filename, new_filename)
    except OSError as e:
        print(f"Error: could not rename file `{filename}`")
        print(e)
        exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Error: expected at least 1 argument")
        sys.exit(1)

    files = media_utils.parse_files(sys.argv)
    for file in files:
        process_file(file)
