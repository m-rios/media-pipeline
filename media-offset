#!/usr/bin/env python3

'''
Change the DateTimeOriginal attribute of a media file by adding / subtracting
a time offset. The time offset is given in seconds.
'''


import datetime
import media_utils
import subprocess
import sys

DATE_FMT = '%Y:%m:%d %H:%M:%S'

def time_delta(offset):
    FMT = '%d:%H:%M:%S'
    fields = [int(field) for field in offset.split(':')]
    if len(fields) != 4:
        print("Error: offset not understood. Expect '%d:%H:%M:%S' (days, hours, minutes and seconds)")
        sys.exit(1)
    days, hours, minutes, seconds = fields
    return datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)

def offset_date(offset, filename, date_field='DateTimeOriginal'):
    """Gets a new day, offset by the offset based on the file metadata"""
    exif_data = media_utils.get_exif_raw_data(filename, [date_field])
    date = datetime.datetime.strptime(exif_data[date_field], DATE_FMT)
    new_date = date + time_delta(offset)
    new_date_str = new_date.strftime(DATE_FMT)
    return new_date_str

def process_as_gopro(offset, filename):
    """Apply offset to QuickTime:CreateDate and DateTimeOriginal"""
    new_date_str = offset_date(offset, filename, 'CreateDate')

    cmd = ['exiftool', f"-DateTimeOriginal=\"{new_date_str}\"", f"-QuickTime:CreateDate=\"{new_date_str}\"", filename]
    print(cmd)
    result = subprocess.run(
        cmd,
        capture_output=True,
        text=True
    )

    if result.returncode != 0:
        print(f"Error: could not set DateTimeOriginal from QuickTime:CreateDate")
        print(result.stderr)
        exit(1)

def process_as_generic(offset, filename):
    """Apply offset to DateTimeOriginal"""
    new_date_str = offset_date(offset, filename)

    cmd = ['exiftool', f"-DateTimeOriginal=\"{new_date_str}\"", filename]
    print(cmd)
    result = subprocess.run(
        cmd,
        capture_output=True,
        text=True
    )

    if result.returncode != 0:
        print(f"Error: could not set DateTimeOriginal from QuickTime:CreateDate")
        print(result.stderr)
        exit(1)

def process_file(offset, filename):
    if media_utils.is_gopro(filename):
        process_as_gopro(offset, filename)
    else:
        process_as_generic(offset, filename)

if __name__ == "__main__":
    offset = sys.argv[1]
    # parse_files expects the original argv where argv[0] is the end of the
    # script so it will look for arguments from [2] and beyond. That is why we
    # pass [1:], so args[0] is the offset that will be skipped by parse_files
    files = media_utils.parse_files(sys.argv[1:])

    for file in files:
        process_file(offset, file)
